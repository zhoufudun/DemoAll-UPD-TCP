/**
 * 客户端
 */
package test;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.util.ResourceLeakDetector;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.charset.Charset;
import org.beykery.jkcp.Kcp;
import org.beykery.jkcp.KcpClient;
import org.beykery.jkcp.KcpOnUdp;

/**
 *客户端收到消息
 * @author beykery
 */
public class TestClient extends KcpClient
{
	
	private static long beginTime;
	private static long endTime;
 /**
  * 处理收到的消息
  */
  @Override
  public void handleReceive(ByteBuf bb, KcpOnUdp kcp)
  {
    String content = bb.toString(Charset.forName("utf-8"));
    System.out.println("conv:" + kcp.getKcp().getConv() + " recv:");
    ByteBuf buf = PooledByteBufAllocator.DEFAULT.buffer(2048);//2k
    buf.writeBytes(content.getBytes(Charset.forName("utf-8")));
    //kcp.send(buf);//send data to addr，发送数据给服务器
    bb.release();//释放
  }

  /**
   * kcp异常，之后此kcp就会被关闭
   *
   * @param ex
   * @param kcp
   */
  @Override
  public void handleException(Throwable ex, KcpOnUdp kcp)
  {
    System.out.println(ex);
  }

  @Override
  public void handleClose(KcpOnUdp kcp)
  {		
	  
	  endTime=System.currentTimeMillis();
	  System.out.println("花费时间" + (endTime-beginTime-1000));
	  super.handleClose(kcp);
	  System.out.println("服务器离开:" + kcp);
	  System.out.println("waitSnd:" + kcp.getKcp().waitSnd());
  }

  @Override
  public void out(ByteBuf msg, Kcp kcp, Object user)
  {
    super.out(msg, kcp, user);
  }

  /**
   * tcpdump udp port 2225 -x -vv -s0 -w 1112.pcap
   *
   * @param args
   * @throws java.lang.InterruptedException
 * @throws IOException 
   */
  public static void main(String[] args) throws InterruptedException, IOException
  {
    ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.DISABLED);
    TestClient tc = new TestClient();
    tc.noDelay(1, 20, 2, 1);
    tc.setMinRto(10);
    tc.wndSize(32, 32);
    tc.setTimeout(1 * 1000);//超时时间1S
    tc.setMtu(512);
    // tc.setConv(121106);//默认conv随机
    tc.connect(new InetSocketAddress("192.168.31.19", 8888));//192.168.0.1
    tc.start();    
    
    int loopNumber=0;
    
    
    //读取文件信息
    String encoding = "GBK";
    StringBuffer sb=new StringBuffer();
    File file = new File("C:\\Users\\12159\\Desktop\\workspace\\testSend-2k.txt");
    if (file.isFile() && file.exists()) { //判断文件是否存在
         InputStreamReader read = new InputStreamReader(
                    new FileInputStream(file), encoding);//考虑到编码格式
         BufferedReader bufferedReader = new BufferedReader(read);
         String lineTxt = null;	        
         while ((lineTxt = bufferedReader.readLine()) != null) {
        	 sb.append(lineTxt);     
          }       
         read.close();
     } else{
         System.out.println("找不到指定的文件");	            
    }
    //
    beginTime=System.currentTimeMillis();//开始时间
    while(true) { //循环发送    
    	String content = sb.toString();
        ByteBuf bb = PooledByteBufAllocator.DEFAULT.buffer(12 *1024);//12k
        bb.writeBytes(content.getBytes(Charset.forName("utf-8")));
        tc.send(bb); 
        //判断是否发送了1M，是停止，否继续
        loopNumber++;
        if(loopNumber==512) {
        	//System.out.println("已经发送1M");
        	System.out.println("循环次数为"+loopNumber);
        	loopNumber=0;
        	break;
        }
        
    }
    
  }
}
