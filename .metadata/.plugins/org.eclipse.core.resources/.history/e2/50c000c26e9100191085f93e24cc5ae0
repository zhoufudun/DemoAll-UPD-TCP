/**
 * kcp服务�?
 */
package com;

import io.netty.bootstrap.Bootstrap;
import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelFuture;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.SocketException;

/**
 *
 * @author beykery
 */
public abstract class KcpServer implements Output, KcpListerner
{

  //private final NioDatagramChannel channel;
  private final SocketAddress addr;
  private int nodelay;
  private int interval = Kcp.IKCP_INTERVAL;
  private int resend;
  private int nc;
  private int sndwnd = Kcp.IKCP_WND_SND;
  private int rcvwnd = Kcp.IKCP_WND_RCV;
  private int mtu = Kcp.IKCP_MTU_DEF;
  private boolean stream;
  private int minRto = Kcp.IKCP_RTO_MIN;
  private KcpThread[] workers;
  private volatile boolean running;
  private long timeout;

  /**
   * server
   *
   * @param port
   * @param workerSize
   */
  public KcpServer(int port, int workerSize)
  {
    if (port <= 0 || workerSize <= 0)
    {
      throw new IllegalArgumentException("参数非法");
    }
    this.workers = new KcpThread[workerSize];
    // 定义一些常量
    final int MAX_LENGTH = 1024; // 最大接收字节长度
    final int PORT_NUM   = 5066;   // port号
    // 用以存放接收数据的字节数组
    byte[] receMsgs = new byte[MAX_LENGTH];
    // 数据报套接字
    DatagramSocket datagramSocket = null;
    // 用以接收数据报
    DatagramPacket datagramPacket;
   
    	/******* 接收数据流程**/            	
    	// 创建一个数据报套接字，并将其绑定到指定port上
        try {
			datagramSocket = new DatagramSocket(port);
			// DatagramPacket(byte buf[], int length),建立一个字节数组来接收UDP包
	        datagramPacket = new DatagramPacket(receMsgs, receMsgs.length);      
	    	while(true) {
	    		try {
	               
	                // receive()来等待接收UDP数据报
	                datagramSocket.receive(datagramPacket);              
	                /****** 解析数据报****/
	                String receStr = new String(datagramPacket.getData(), 0 , datagramPacket.getLength());
	                System.out.println("Server Rece:" + receStr);
	                System.out.println("Server Port:" + datagramPacket.getPort());
	               
	                /***** 返回ACK消息数据报*/
	                // 组装数据报
	                byte[] buf = "I receive the message".getBytes();
	                DatagramPacket sendPacket = new DatagramPacket(buf, buf.length, datagramPacket.getAddress(), datagramPacket.getPort());
	                // 发送消息
	                datagramSocket.send(sendPacket);
	            } catch (SocketException e) {
	            	if (datagramSocket != null) {
	                    datagramSocket.close();
	                }
	            	break;
	            } catch (IOException e) {
	            	if (datagramSocket != null) {
	                    datagramSocket.close();
	                }
	            	break;
	            }                  		
	    	}  
		} catch (SocketException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        // DatagramPacket(byte buf[], int length),建立一个字节数组来接收UDP包
        datagramPacket = new DatagramPacket(receMsgs, receMsgs.length);      
    	while(true) {
    		try {
               
                // receive()来等待接收UDP数据报
                datagramSocket.receive(datagramPacket);              
                /****** 解析数据报****/
                String receStr = new String(datagramPacket.getData(), 0 , datagramPacket.getLength());
                System.out.println("Server Rece:" + receStr);
                System.out.println("Server Port:" + datagramPacket.getPort());
               
                /***** 返回ACK消息数据报*/
                // 组装数据报
                byte[] buf = "I receive the message".getBytes();
                DatagramPacket sendPacket = new DatagramPacket(buf, buf.length, datagramPacket.getAddress(), datagramPacket.getPort());
                // 发送消息
                datagramSocket.send(sendPacket);
            } catch (SocketException e) {
            	if (datagramSocket != null) {
                    datagramSocket.close();
                }
            	break;
            } catch (IOException e) {
            	if (datagramSocket != null) {
                    datagramSocket.close();
                }
            	break;
            }                  		
    	}       
    
    
  }

  /**
   * �?�?
   */
  public void start()
  {
    if (!this.running)
    {
      this.running = true;
      for (int i = 0; i < this.workers.length; i++)
      {
    	//这里的this指的是哪�?个，this指的是KcpServer
        workers[i] = new KcpThread(this, this, addr);//参数Output，KcpListener，InetSocketAddress
        workers[i].setName("kcp thread " + i);
        workers[i].wndSize(sndwnd, rcvwnd);
        workers[i].noDelay(nodelay, interval, resend, nc);
        workers[i].setMtu(mtu);
        workers[i].setTimeout(timeout);
        workers[i].setMinRto(minRto);
        workers[i].setStream(stream);
        workers[i].start();
      }
    }
  }

  /**
   * close
   *
   * @return
   */
  public ChannelFuture close()
  {
    if (this.running)
    {
      this.running = false;
      for (KcpThread kt : this.workers)
      {
        kt.close();
      }
      this.workers = null;
      return this.channel.close();
    }
    return null;
  }

  /**
   * 连接 �?旦连接上�?个默认地�?,则不会再收取其它地址的信�?
   *
   * @param addr
   */
//  public void connect(InetSocketAddress addr)
//  {
//    if (!this.running)
//    {
//      this.channel.connect(addr);
//    }
//  }

  /**
   * kcp call
   *
   * @param msg
   * @param kcp
   * @param user
   */
 
  public void out(ByteBuf msg, Kcp kcp, Object user)
  {
    DatagramPacket temp = new DatagramPacket(msg, (InetSocketAddress) user, this.addr);
    this.channel.writeAndFlush(temp);
  }

  /**
   * fastest: ikcp_nodelay(kcp, 1, 20, 2, 1) nodelay: 0:disable(default),
   * 1:enable interval: internal update timer interval in millisec, default is
   * 100ms resend: 0:disable fast resend(default), 1:enable fast resend nc:
   * 0:normal congestion control(default), 1:disable congestion control
   *
   * @param nodelay
   * @param interval
   * @param resend
   * @param nc
   */
  public void noDelay(int nodelay, int interval, int resend, int nc)
  {
    this.nodelay = nodelay;
    this.interval = interval;
    this.resend = resend;
    this.nc = nc;
  }

  /**
   * set maximum window size: sndwnd=32, rcvwnd=32 by default
   *
   * @param sndwnd
   * @param rcvwnd
   */
  public void wndSize(int sndwnd, int rcvwnd)
  {
    this.sndwnd = sndwnd;
    this.rcvwnd = rcvwnd;
  }

  /**
   * change MTU size, default is 1400
   *
   * @param mtu
   */
  public void setMtu(int mtu)
  {
    this.mtu = mtu;
  }

  /**
   * stream mode
   *
   *
   * @param stream
   */
  public void setStream(boolean stream)
  {
    this.stream = stream;
  }

  public boolean isStream()
  {
    return stream;
  }

  public void setMinRto(int minRto)
  {
    this.minRto = minRto;
  }

  public void setTimeout(long timeout)
  {
    this.timeout = timeout;
  }

  public long getTimeout()
  {
    return this.timeout;
  }

  /**
   * 发�??
   *
   * @param bb
   * @param ku
   */
  public void send(ByteBuf bb, KcpOnUdp ku)
  {
    ku.send(bb);
  }

  /**
   * receive DatagramPacket
   *
   * @param dp
   */
  private void onReceive(DatagramPacket dp)
  {
    if (this.running)
    {
      InetSocketAddress sender = dp.sender();
      int hash = sender.hashCode();
      hash = hash < 0 ? -hash : hash;
      this.workers[hash % workers.length].input(dp);
    } else
    {
      dp.release();
    }
  }

}
