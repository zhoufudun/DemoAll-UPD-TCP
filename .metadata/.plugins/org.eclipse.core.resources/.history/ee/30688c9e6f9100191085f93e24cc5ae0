/**
 * 测试
 */
package com;

import java.net.DatagramSocket;
import java.net.InetSocketAddress;

import io.netty.bootstrap.Bootstrap;
import io.netty.buffer.ByteBuf;
import test.TestClient;


/**
 *
 * @author beykery
 */
public abstract class KcpClient implements Output, KcpListerner, Runnable
{

   // private final NioDatagramChannel channel;
    private final InetSocketAddress addr;
    private int nodelay;
    private int interval = Kcp.IKCP_INTERVAL;
    private int resend;
    private int nc;
    private int sndwnd = Kcp.IKCP_WND_SND;
    private int rcvwnd = Kcp.IKCP_WND_RCV;
    private int mtu = Kcp.IKCP_MTU_DEF;
    private int conv = (int) (Math.random() * Integer.MAX_VALUE);
    private boolean stream;
    private int minRto = Kcp.IKCP_RTO_MIN;
    private long timeout;
    private KcpOnUdp kcp;
    private volatile boolean running;
    private static final Object waitLock = new Object();//加锁
    private InetSocketAddress remote;
    private NioEventLoopGroup nioEventLoopGroup;

    /**
     * client
     */
    public KcpClient()
    {
        this(0);
    }

    /**
     * 客户�?
     * 设置本机端口port
     * @param port
     */
    public KcpClient(int port)
    {
    	System.out.println(port);
    	private String sendStr = "SendString";
        private String netAddress = "127.0.0.1";
        private final int PORT_NUM = 5066;
       
        private DatagramSocket datagramSocket;
        private DatagramPacket datagramPacket;
        
    	
    }

    /**
     * fastest: ikcp_nodelay(kcp, 1, 20, 2, 1) nodelay: 0:disable(default),
     * 1:enable interval: internal update timer interval in millisec, default is
     * 100ms resend: 0:disable fast resend(default), 1:enable fast resend nc:
     * 0:normal congestion control(default), 1:disable congestion control
     *
     * @param nodelay
     * @param interval
     * @param resend
     * @param nc
     */
    public void noDelay(int nodelay, int interval, int resend, int nc)
    {
        this.nodelay = nodelay;
        this.interval = interval;
        this.resend = resend;
        this.nc = nc;
    }

    /**
     * set maximum window size: sndwnd=32, rcvwnd=32 by default
     *
     * @param sndwnd
     * @param rcvwnd
     */
    public void wndSize(int sndwnd, int rcvwnd)
    {
        this.sndwnd = sndwnd;
        this.rcvwnd = rcvwnd;
    }

    /**
     * change MTU size, default is 1400
     *
     * @param mtu
     */
    public void setMtu(int mtu)
    {
        this.mtu = mtu;
    }

    /**
     * conv
     *
     * @param conv
     */
    public void setConv(int conv)
    {
        this.conv = conv;
    }

    /**
     * stream mode
     *
     *
     * @param stream
     */
    public void setStream(boolean stream)
    {
        this.stream = stream;
    }

    public boolean isStream()
    {
        return stream;
    }

    public void setMinRto(int minRto)
    {
        this.minRto = minRto;
    }

    public void setTimeout(long timeout)
    {
        this.timeout = timeout;
    }

    public long getTimeout()
    {
        return this.timeout;
    }

    /**
     * 固定连接到一个服务器地址,只会处理此地�?的消�?
     *
     * @param addr
     */
    public void connect(InetSocketAddress addr)
    {
        this.remote = addr;//远端地址
        this.channel.connect(addr);//绑定远端地址
    }

    
    public void out(ByteBuf msg, Kcp kcp, Object user)
    {
        DatagramPacket temp = new DatagramPacket(msg, (InetSocketAddress) user, this.addr);
        this.channel.writeAndFlush(temp);
    }

    
    public void handleClose(KcpOnUdp kcp)
    {
        this.close();
    }

    /**
     * 收到服务器消�?
     *
     * @param dp
     */
    private void onReceive(DatagramPacket dp)
    {
        if (this.kcp != null && this.running)
        {
            this.kcp.input(dp.content());
            //
            //System.out.println("服务器回�?");
            //
            synchronized (this.waitLock)
            {
                this.waitLock.notify();
            }
        } else
        {
            dp.release();
        }
    }

    /**
     * 关掉
     *
     */
    public void close()
    {
        if (this.running)
        {
            this.running = false;
        }
    }

    /**
     * 发�?�消�?
     *
     * @param bb
     */
    public void send(ByteBuf bb)
    {
        if (this.kcp != null)
        {
            this.kcp.send(bb);
            synchronized (this.waitLock)
            {
                this.waitLock.notify();
            }
        }
    }

    /**
     * �?启线程处理kcp状�??
     */
    public void start()
    {
        if (!this.running)
        {
            this.running = true;
            this.kcp = new KcpOnUdp(this, remote, addr, this);
            this.kcp.noDelay(nodelay, interval, resend, nc);
            this.kcp.wndSize(sndwnd, rcvwnd);
            this.kcp.setTimeout(timeout);
            this.kcp.setMtu(mtu);
            this.kcp.setConv(conv);
            this.kcp.setStream(stream);
            this.kcp.setMinRto(minRto);
            Thread t = new Thread(this);
            t.setName("kcp client thread");
            t.start();
        }
    }
    //修改后的程序如下
   
    public void run()
    {
        long start, end;
        while (running)
        {
        	synchronized (waitLock) //加锁Object对象
            {
	            start = System.currentTimeMillis();//�?始时�?
	            if (kcp.isClosed()) //kcp关闭
	            {
	                this.running = false;
	                continue;//跳出while循环
	            }
	            kcp.update(); //
	            end = System.currentTimeMillis();//结束时间
	            if (end - start <interval) //设置刷新时间10MS
	            {                
	                try
	                {
	                	//wait会释放锁
	                    //直到其他线程调用此对象的 notify() 方法�? notifyAll() 方法”，当前线程被唤�?(进入“就绪状态�??)
	                    waitLock.wait(interval - end + start);//直到时间差为10MS???
	                } catch (InterruptedException ex){
	                    ex.printStackTrace();
	                }	                
	            }
            }
        }      
        this.release();//释放内存
        nioEventLoopGroup.shutdownGracefully();//关闭线程
        this.channel.close();//关闭通道
    }
    /*
     * 原本的程序如�?
      @Override
    public void run()
    {
        long start, end;
        while (running)
        {
        	
	            start = System.currentTimeMillis();//�?始时�?
	            if (kcp.isClosed()) //kcp关闭
	            {
	                this.running = false;
	                continue;//跳出while循环
	            }
	            kcp.update(); //
	            end = System.currentTimeMillis();//结束时间
	            if (end - start <interval) //设置刷新时间10MS
	            {   
	            	synchronized (waitLock) //加锁Object对象
            		{             
		                try
		                {
		                	//wait会释放锁
		                    //直到其他线程调用此对象的 notify() 方法�? notifyAll() 方法”，当前线程被唤�?(进入“就绪状态�??)
		                    waitLock.wait(interval - end + start);//直到时间差为10MS???
		                } catch (InterruptedException ex){
		                    ex.printStackTrace();
		                }
		            }	                
	            }    
        }      
        this.release();//释放内存
        nioEventLoopGroup.shutdownGracefully();//关闭线程
        this.channel.close();//关闭通道
    }
     
     */

    /**
     * 释放内存
     */
    private void release()
    {
        this.kcp.release();
    }
    /**
     * 自定义Hander 内部�?
     */
    public class  UdpHander extends ChannelInboundHandlerAdapter{
    	//处理收到的内�?
        @Override
        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
        {
            DatagramPacket dp = (DatagramPacket) msg;
            KcpClient.this.onReceive(dp);
        }
        //处理异常
        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
        {
            KcpClient.this.handleException(cause, null);
            KcpClient.this.close();
        }
    }
}
